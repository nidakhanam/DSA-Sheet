Approach 1 : Better Solution (Time : O(m*n) , Space : O(m+n))

boolean[] zeroRows = new boolean[m];
boolean[] zeroCols = new boolean[n];

// Step 1: Detect zeros
for (int i = 0; i < m; i++) {
    for (int j = 0; j < n; j++) {
        if (matrix[i][j] == 0) {
            zeroRows[i] = true;
            zeroCols[j] = true;
        }
    }
}

// Step 2: Set rows and columns to zero
for (int i = 0; i < m; i++) {
    for (int j = 0; j < n; j++) {
        if (zeroRows[i] || zeroCols[j]) {
            matrix[i][j] = 0;
        }
    }
}

Approach 2: Optimized Solution (Constant Space)(Time : O(m*n) , Space : O(1))

// Step 1: Mark if the first row and column need to be zeroed
boolean firstRowZero = false, firstColZero = false;

for (int i = 0; i < m; i++) {
    if (matrix[i][0] == 0) firstColZero = true;
}

for (int j = 0; j < n; j++) {
    if (matrix[0][j] == 0) firstRowZero = true;
}

// Step 2: Mark rows and columns (except first row/column)
for (int i = 1; i < m; i++) {
    for (int j = 1; j < n; j++) {
        if (matrix[i][j] == 0) {
            matrix[i][0] = 0;  // Mark the row
            matrix[0][j] = 0;  // Mark the column
        }
    }
}

// Step 3: Set elements to zero based on marks
for (int i = 1; i < m; i++) {
    for (int j = 1; j < n; j++) {
        if (matrix[i][0] == 0 || matrix[0][j] == 0) {
            matrix[i][j] = 0;
        }
    }
}

// Step 4: Zero the first row if needed
if (firstRowZero) {
    for (int j = 0; j < n; j++) {
        matrix[0][j] = 0;
    }
}

// Step 5: Zero the first column if needed
if (firstColZero) {
    for (int i = 0; i < m; i++) {
        matrix[i][0] = 0;
    }
}
