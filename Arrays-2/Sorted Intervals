import java.util.Arrays;
import java.util.Comparator;

class Solution {
    public int[][] merge(int[][] intervals) {
        // Sort the intervals based on the starting values
        int[][] sortedArray = Arrays.stream(intervals)
                           .sorted(Comparator.comparingInt(row -> row[0]))
                           .toArray(int[][]::new);

        int n = intervals.length;
        int[][] ans = new int[n][2];  // Array to store the merged intervals
        int it = 0;  // Pointer for the position in `ans`
        
        // Initialize the first interval to be merged
        ans[it][0] = sortedArray[0][0];
        ans[it][1] = sortedArray[0][1];

        // Traverse the sorted intervals and merge them as needed
        for (int i = 1; i < n; i++) {
            if (ans[it][1] < sortedArray[i][0]) {  // No overlap
                it++;  // Move to the next interval
                ans[it][0] = sortedArray[i][0];
                ans[it][1] = sortedArray[i][1];
            } else {  // Overlap
                ans[it][1] = Math.max(ans[it][1], sortedArray[i][1]);
            }
        }

        // Return only the filled part of the array
        return Arrays.copyOf(ans, it + 1);
    }
}